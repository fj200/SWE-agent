{"model_name_or_path": "250526_anthropic_filemap_simple_review_sbl__claude-sonnet-4-20250514__t-0.00__p-1.00__c-5.00___swe_bench_lite_test", "instance_id": "matplotlib__matplotlib-26020", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..d54a546248 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,24 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Check if ax.axis is subscriptable and has the expected toggle method\n+    # (mpl_toolkits.axes_grid1.mpl_axes.Axes)\n+    try:\n+        if (hasattr(ax.axis, '__getitem__') and \n+            \"bottom\" in ax.axis and \"left\" in ax.axis and\n+            hasattr(ax.axis[\"bottom\"], 'toggle') and\n+            hasattr(ax.axis[\"left\"], 'toggle')):\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        else:\n+            # For regular matplotlib axes (and subclasses like GeoAxes)\n+            ax.tick_params(bottom=bottom_on, labelbottom=bottom_on,\n+                          left=left_on, labelleft=left_on)\n+    except (TypeError, KeyError, AttributeError):\n+        # Fallback to tick_params for any unexpected axis attribute structure\n+        ax.tick_params(bottom=bottom_on, labelbottom=bottom_on,\n+                      left=left_on, labelleft=left_on)\n \n \n class CbarAxesBase:\ndiff --git a/lib/mpl_toolkits/axes_grid1/parasite_axes.py b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\nindex cafd06adba..b53178228d 100644\n--- a/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n+++ b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n@@ -5,6 +5,68 @@ from matplotlib.transforms import Bbox\n from .mpl_axes import Axes\n \n \n+def _set_axis_visibility(ax, axis_names, visible):\n+    \"\"\"\n+    Set visibility of axis/axes for both mpl_toolkits and regular matplotlib axes.\n+    \n+    Parameters\n+    ----------\n+    ax : Axes\n+        The axes instance\n+    axis_names : str or tuple of str\n+        Name(s) of the axis/axes to modify (\"left\", \"right\", \"top\", \"bottom\")\n+    visible : bool\n+        Whether to make the axis/axes visible\n+    \"\"\"\n+    if isinstance(axis_names, str):\n+        axis_names = (axis_names,)\n+    \n+    # Check if ax.axis is subscriptable and has the expected structure\n+    # (mpl_toolkits.axes_grid1.mpl_axes.Axes)\n+    try:\n+        if (hasattr(ax.axis, '__getitem__') and \n+            all(name in ax.axis for name in axis_names) and\n+            all(hasattr(ax.axis[name], 'set_visible') for name in axis_names)):\n+            # Use the mpl_toolkits axis interface\n+            if len(axis_names) == 1:\n+                ax.axis[axis_names[0]].set_visible(visible)\n+            else:\n+                ax.axis[axis_names].set_visible(visible)\n+        else:\n+            # Fallback for regular matplotlib axes\n+            _set_axis_visibility_fallback(ax, axis_names, visible)\n+    except (TypeError, KeyError, AttributeError):\n+        # Fallback for any unexpected axis attribute structure\n+        _set_axis_visibility_fallback(ax, axis_names, visible)\n+\n+\n+def _set_axis_visibility_fallback(ax, axis_names, visible):\n+    \"\"\"\n+    Fallback method to set axis visibility for regular matplotlib axes.\n+    \"\"\"\n+    for name in axis_names:\n+        if name in (\"left\", \"right\"):\n+            # Y-axis related\n+            if name == \"left\":\n+                ax.tick_params(left=visible, labelleft=visible)\n+                if hasattr(ax, 'spines') and 'left' in ax.spines:\n+                    ax.spines['left'].set_visible(visible)\n+            elif name == \"right\":\n+                ax.tick_params(right=visible, labelright=visible)\n+                if hasattr(ax, 'spines') and 'right' in ax.spines:\n+                    ax.spines['right'].set_visible(visible)\n+        elif name in (\"top\", \"bottom\"):\n+            # X-axis related\n+            if name == \"bottom\":\n+                ax.tick_params(bottom=visible, labelbottom=visible)\n+                if hasattr(ax, 'spines') and 'bottom' in ax.spines:\n+                    ax.spines['bottom'].set_visible(visible)\n+            elif name == \"top\":\n+                ax.tick_params(top=visible, labeltop=visible)\n+                if hasattr(ax, 'spines') and 'top' in ax.spines:\n+                    ax.spines['top'].set_visible(visible)\n+\n+\n class ParasiteAxesBase:\n \n     def __init__(self, parent_axes, aux_transform=None,\n@@ -158,9 +220,9 @@ class HostAxesBase:\n         will have ticks on the right.\n         \"\"\"\n         ax = self._add_twin_axes(axes_class, sharex=self)\n-        self.axis[\"right\"].set_visible(False)\n-        ax.axis[\"right\"].set_visible(True)\n-        ax.axis[\"left\", \"top\", \"bottom\"].set_visible(False)\n+        _set_axis_visibility(self, \"right\", False)\n+        _set_axis_visibility(ax, \"right\", True)\n+        _set_axis_visibility(ax, (\"left\", \"top\", \"bottom\"), False)\n         return ax\n \n     def twiny(self, axes_class=None):\n@@ -171,9 +233,9 @@ class HostAxesBase:\n         will have ticks on the top.\n         \"\"\"\n         ax = self._add_twin_axes(axes_class, sharey=self)\n-        self.axis[\"top\"].set_visible(False)\n-        ax.axis[\"top\"].set_visible(True)\n-        ax.axis[\"left\", \"right\", \"bottom\"].set_visible(False)\n+        _set_axis_visibility(self, \"top\", False)\n+        _set_axis_visibility(ax, \"top\", True)\n+        _set_axis_visibility(ax, (\"left\", \"right\", \"bottom\"), False)\n         return ax\n \n     def twin(self, aux_trans=None, axes_class=None):\n@@ -187,9 +249,9 @@ class HostAxesBase:\n             aux_trans = mtransforms.IdentityTransform()\n         ax = self._add_twin_axes(\n             axes_class, aux_transform=aux_trans, viewlim_mode=\"transform\")\n-        self.axis[\"top\", \"right\"].set_visible(False)\n-        ax.axis[\"top\", \"right\"].set_visible(True)\n-        ax.axis[\"left\", \"bottom\"].set_visible(False)\n+        _set_axis_visibility(self, (\"top\", \"right\"), False)\n+        _set_axis_visibility(ax, (\"top\", \"right\"), True)\n+        _set_axis_visibility(ax, (\"left\", \"bottom\"), False)\n         return ax\n \n     def _add_twin_axes(self, axes_class, **kwargs):\n"}