{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-1.00___swe_bench_lite_test", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..c950b7efc\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+\n+print(\"Testing float n_neighbors parameter...\")\n+\n+# Create test data\n+X, y = make_blobs()\n+\n+# Test 1: Float n_neighbors in constructor\n+print(\"\\nTest 1: Float n_neighbors in constructor\")\n+try:\n+    neighbors = NearestNeighbors(n_neighbors=3.)\n+    neighbors.fit(X)\n+    result = neighbors.kneighbors(X)\n+    print(\"SUCCESS: No error with float n_neighbors in constructor\")\n+except Exception as e:\n+    print(f\"ERROR: {type(e).__name__}: {e}\")\n+\n+# Test 2: Float n_neighbors in kneighbors method\n+print(\"\\nTest 2: Float n_neighbors in kneighbors method\")\n+try:\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    result = neighbors.kneighbors(X, n_neighbors=3.)\n+    print(\"SUCCESS: No error with float n_neighbors in kneighbors method\")\n+except Exception as e:\n+    print(f\"ERROR: {type(e).__name__}: {e}\")\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..80fed77b9 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -8,6 +8,7 @@\n # License: BSD 3 clause (C) INRIA, University of Amsterdam\n import warnings\n from abc import ABCMeta, abstractmethod\n+import numbers\n \n import numpy as np\n from scipy.sparse import csr_matrix, issparse\n@@ -99,6 +100,36 @@ def _get_weights(dist, weights):\n                          \"'distance', or a callable function\")\n \n \n+def _check_n_neighbors(n_neighbors):\n+    \"\"\"Check that n_neighbors is a valid integer.\n+    \n+    Parameters\n+    ----------\n+    n_neighbors : int or None\n+        Number of neighbors to validate.\n+        \n+    Returns\n+    -------\n+    n_neighbors : int or None\n+        The validated n_neighbors parameter, converted to int if necessary.\n+        \n+    Raises\n+    ------\n+    TypeError\n+        If n_neighbors is not None and not an integer.\n+    ValueError\n+        If n_neighbors is not positive.\n+    \"\"\"\n+    if n_neighbors is not None:\n+        if not isinstance(n_neighbors, (numbers.Integral, np.integer)):\n+            raise TypeError(\"n_neighbors must be an integer, got %s\" \n+                          % type(n_neighbors).__name__)\n+        n_neighbors = int(n_neighbors)  # Convert to Python int for Cython compatibility\n+        if n_neighbors <= 0:\n+            raise ValueError(\"n_neighbors must be positive, got %d\" % n_neighbors)\n+    return n_neighbors\n+\n+\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     \"\"\"Base class for nearest neighbors estimators.\"\"\"\n \n@@ -107,7 +138,7 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n-        self.n_neighbors = n_neighbors\n+        self.n_neighbors = _check_n_neighbors(n_neighbors)\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -327,6 +358,8 @@ class KNeighborsMixin(object):\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        \n+        n_neighbors = _check_n_neighbors(n_neighbors)\n \n         if X is not None:\n             query_is_train = False\n@@ -466,6 +499,8 @@ class KNeighborsMixin(object):\n         \"\"\"\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        \n+        n_neighbors = _check_n_neighbors(n_neighbors)\n \n         # kneighbors does the None handling.\n         if X is not None:\ndiff --git a/test_classifier_regressor.py b/test_classifier_regressor.py\nnew file mode 100644\nindex 000000000..dbb1c8089\n--- /dev/null\n+++ b/test_classifier_regressor.py\n@@ -0,0 +1,45 @@\n+#!/usr/bin/env python3\n+\n+from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\n+from sklearn.datasets import make_blobs\n+import numpy as np\n+\n+print(\"Testing n_neighbors validation in classifier and regressor...\")\n+\n+# Create test data\n+X, y = make_blobs(n_samples=20, centers=3, random_state=42)\n+\n+def test_case(description, test_func):\n+    print(f\"\\n{description}\")\n+    try:\n+        result = test_func()\n+        print(\"SUCCESS: No error\")\n+        return True\n+    except Exception as e:\n+        print(f\"ERROR: {type(e).__name__}: {e}\")\n+        return False\n+\n+# Test KNeighborsClassifier\n+test_case(\"Test 1: KNeighborsClassifier with float n_neighbors\", \n+          lambda: KNeighborsClassifier(n_neighbors=3.))\n+\n+test_case(\"Test 2: KNeighborsClassifier with valid integer n_neighbors\", \n+          lambda: KNeighborsClassifier(n_neighbors=3))\n+\n+# Test KNeighborsRegressor  \n+test_case(\"Test 3: KNeighborsRegressor with float n_neighbors\", \n+          lambda: KNeighborsRegressor(n_neighbors=3.))\n+\n+test_case(\"Test 4: KNeighborsRegressor with valid integer n_neighbors\", \n+          lambda: KNeighborsRegressor(n_neighbors=3))\n+\n+# Test kneighbors method on classifier\n+def test_classifier_kneighbors():\n+    clf = KNeighborsClassifier(n_neighbors=3)\n+    clf.fit(X, y)\n+    return clf.kneighbors(X, n_neighbors=2.)\n+\n+test_case(\"Test 5: KNeighborsClassifier kneighbors with float n_neighbors\", \n+          test_classifier_kneighbors)\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..e3195dca8\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+import numpy as np\n+\n+print(\"Testing comprehensive n_neighbors validation...\")\n+\n+# Create test data\n+X, y = make_blobs(n_samples=20, centers=3, random_state=42)\n+\n+def test_case(description, test_func):\n+    print(f\"\\n{description}\")\n+    try:\n+        result = test_func()\n+        print(\"SUCCESS: No error\")\n+        return True\n+    except Exception as e:\n+        print(f\"ERROR: {type(e).__name__}: {e}\")\n+        return False\n+\n+# Test 1: Float n_neighbors in constructor\n+test_case(\"Test 1: Float n_neighbors in constructor\", \n+          lambda: NearestNeighbors(n_neighbors=3.))\n+\n+# Test 2: Float n_neighbors in kneighbors method\n+def test_kneighbors_float():\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    return neighbors.kneighbors(X, n_neighbors=3.)\n+\n+test_case(\"Test 2: Float n_neighbors in kneighbors method\", test_kneighbors_float)\n+\n+# Test 3: Float n_neighbors in kneighbors_graph method\n+def test_kneighbors_graph_float():\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    return neighbors.kneighbors_graph(X, n_neighbors=3.)\n+\n+test_case(\"Test 3: Float n_neighbors in kneighbors_graph method\", test_kneighbors_graph_float)\n+\n+# Test 4: Valid integer n_neighbors should work\n+def test_valid_integer():\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    distances, indices = neighbors.kneighbors(X, n_neighbors=2)\n+    graph = neighbors.kneighbors_graph(X, n_neighbors=2)\n+    return distances, indices, graph\n+\n+test_case(\"Test 4: Valid integer n_neighbors should work\", test_valid_integer)\n+\n+# Test 5: numpy integer should work\n+def test_numpy_integer():\n+    neighbors = NearestNeighbors(n_neighbors=np.int32(3))\n+    neighbors.fit(X)\n+    distances, indices = neighbors.kneighbors(X, n_neighbors=np.int64(2))\n+    return distances, indices\n+\n+test_case(\"Test 5: numpy integer should work\", test_numpy_integer)\n+\n+# Test 6: Zero n_neighbors should fail\n+test_case(\"Test 6: Zero n_neighbors should fail\", \n+          lambda: NearestNeighbors(n_neighbors=0))\n+\n+# Test 7: Negative n_neighbors should fail\n+test_case(\"Test 7: Negative n_neighbors should fail\", \n+          lambda: NearestNeighbors(n_neighbors=-1))\n+\n+# Test 8: String n_neighbors should fail\n+test_case(\"Test 8: String n_neighbors should fail\", \n+          lambda: NearestNeighbors(n_neighbors=\"3\"))\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..7ad821d72\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,69 @@\n+#!/usr/bin/env python3\n+\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+import numpy as np\n+\n+print(\"Testing edge cases for n_neighbors validation...\")\n+\n+# Create test data\n+X, y = make_blobs(n_samples=20, centers=3, random_state=42)\n+\n+def test_case(description, test_func):\n+    print(f\"\\n{description}\")\n+    try:\n+        result = test_func()\n+        print(\"SUCCESS: No error\")\n+        return True\n+    except Exception as e:\n+        print(f\"ERROR: {type(e).__name__}: {e}\")\n+        return False\n+\n+# Test various numeric types that should fail\n+test_case(\"Test 1: Float 3.0 should fail\", \n+          lambda: NearestNeighbors(n_neighbors=3.0))\n+\n+test_case(\"Test 2: Float 3.5 should fail\", \n+          lambda: NearestNeighbors(n_neighbors=3.5))\n+\n+test_case(\"Test 3: Complex number should fail\", \n+          lambda: NearestNeighbors(n_neighbors=3+0j))\n+\n+test_case(\"Test 4: Boolean True should fail\", \n+          lambda: NearestNeighbors(n_neighbors=True))\n+\n+test_case(\"Test 5: Boolean False should fail\", \n+          lambda: NearestNeighbors(n_neighbors=False))\n+\n+# Test various integer types that should work\n+test_case(\"Test 6: Python int should work\", \n+          lambda: NearestNeighbors(n_neighbors=3))\n+\n+test_case(\"Test 7: numpy.int32 should work\", \n+          lambda: NearestNeighbors(n_neighbors=np.int32(3)))\n+\n+test_case(\"Test 8: numpy.int64 should work\", \n+          lambda: NearestNeighbors(n_neighbors=np.int64(3)))\n+\n+test_case(\"Test 9: numpy.int8 should work\", \n+          lambda: NearestNeighbors(n_neighbors=np.int8(3)))\n+\n+# Test boundary values\n+test_case(\"Test 10: n_neighbors=1 should work\", \n+          lambda: NearestNeighbors(n_neighbors=1))\n+\n+test_case(\"Test 11: n_neighbors=0 should fail\", \n+          lambda: NearestNeighbors(n_neighbors=0))\n+\n+test_case(\"Test 12: n_neighbors=-1 should fail\", \n+          lambda: NearestNeighbors(n_neighbors=-1))\n+\n+# Test None (should work as it uses default)\n+test_case(\"Test 13: n_neighbors=None should work\", \n+          lambda: NearestNeighbors(n_neighbors=None))\n+\n+# Test very large integer (should work)\n+test_case(\"Test 14: Large integer should work\", \n+          lambda: NearestNeighbors(n_neighbors=1000))\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_graph_function.py b/test_graph_function.py\nnew file mode 100644\nindex 000000000..1e11c46e6\n--- /dev/null\n+++ b/test_graph_function.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+\n+from sklearn.neighbors import kneighbors_graph\n+from sklearn.datasets import make_blobs\n+import numpy as np\n+\n+print(\"Testing kneighbors_graph function with float n_neighbors...\")\n+\n+# Create test data\n+X, y = make_blobs(n_samples=10, centers=3, random_state=42)\n+\n+def test_case(description, test_func):\n+    print(f\"\\n{description}\")\n+    try:\n+        result = test_func()\n+        print(\"SUCCESS: No error\")\n+        return True\n+    except Exception as e:\n+        print(f\"ERROR: {type(e).__name__}: {e}\")\n+        return False\n+\n+# Test kneighbors_graph function with float n_neighbors\n+test_case(\"Test 1: kneighbors_graph function with float n_neighbors\", \n+          lambda: kneighbors_graph(X, n_neighbors=3.))\n+\n+# Test kneighbors_graph function with valid integer n_neighbors\n+test_case(\"Test 2: kneighbors_graph function with valid integer n_neighbors\", \n+          lambda: kneighbors_graph(X, n_neighbors=3))\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_pr_requirements.py b/test_pr_requirements.py\nnew file mode 100644\nindex 000000000..d6a7dad51\n--- /dev/null\n+++ b/test_pr_requirements.py\n@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test script to verify that the PR requirements are met.\n+\n+The PR description states:\n+1. Float n_neighbors in constructor should raise a helpful error message\n+2. Float n_neighbors in kneighbors method should also raise a helpful error message\n+3. The error should be caught earlier with a more helpful message\n+\"\"\"\n+\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+\n+print(\"Testing PR requirements...\")\n+\n+# Create test data\n+X, y = make_blobs()\n+\n+print(\"\\n=== Test 1: Float n_neighbors in constructor ===\")\n+print(\"Code: neighbors = NearestNeighbors(n_neighbors=3.)\")\n+try:\n+    neighbors = NearestNeighbors(n_neighbors=3.)\n+    neighbors.fit(X)\n+    neighbors.kneighbors(X)\n+    print(\"UNEXPECTED: No error raised!\")\n+except TypeError as e:\n+    print(f\"SUCCESS: Got expected TypeError: {e}\")\n+    print(\"\u2713 Error is caught early (in constructor)\")\n+    print(\"\u2713 Error message is helpful and clear\")\n+except Exception as e:\n+    print(f\"UNEXPECTED ERROR: {type(e).__name__}: {e}\")\n+\n+print(\"\\n=== Test 2: Float n_neighbors in kneighbors method ===\")\n+print(\"Code: neighbors.kneighbors(X, n_neighbors=3.)\")\n+try:\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    neighbors.kneighbors(X, n_neighbors=3.)\n+    print(\"UNEXPECTED: No error raised!\")\n+except TypeError as e:\n+    print(f\"SUCCESS: Got expected TypeError: {e}\")\n+    print(\"\u2713 Error is caught early (in kneighbors method)\")\n+    print(\"\u2713 Error message is helpful and clear\")\n+except Exception as e:\n+    print(f\"UNEXPECTED ERROR: {type(e).__name__}: {e}\")\n+\n+print(\"\\n=== Test 3: Verify normal integer usage still works ===\")\n+try:\n+    neighbors = NearestNeighbors(n_neighbors=3)\n+    neighbors.fit(X)\n+    distances, indices = neighbors.kneighbors(X, n_neighbors=2)\n+    print(f\"SUCCESS: Normal usage works. Shape: {distances.shape}\")\n+    print(\"\u2713 Integer n_neighbors work correctly\")\n+except Exception as e:\n+    print(f\"UNEXPECTED ERROR: {type(e).__name__}: {e}\")\n+\n+print(\"\\n=== Summary ===\")\n+print(\"\u2713 Float n_neighbors in constructor raises TypeError with helpful message\")\n+print(\"\u2713 Float n_neighbors in kneighbors method raises TypeError with helpful message\") \n+print(\"\u2713 Errors are caught early with clear messages instead of cryptic Cython errors\")\n+print(\"\u2713 Normal integer usage continues to work correctly\")\n+print(\"\\nAll PR requirements have been successfully implemented!\")\n\\ No newline at end of file\n"}